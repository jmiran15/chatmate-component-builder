<!---
outcomes: 
--->

# Binary Decision Tree: Analysis

<div id="outcomes"><details><summary></summary>

* Justify $\Omega(\lg n)$ is the lower bound for comparison-based searching algorithms.

</details></div>

Here is the schematic representation of a binary decision tree.

<div class="center">
<img src="/img/31/linear02.png" width="60%">
</div>

Notice the followings:

- The decision tree is a binary tree (the answer to the comparison operation is either "yes" or "no").

- Internal nodes are _binary_ decisions (corresponding to comparisons).

- External nodes (leaves) are _resulting outputs_ (answers).

- An execution of the algorithm corresponds to a _path from the root to a leaf_. 

- The **length** of such an execution path is the _running time_ of the algorithm for the case of the input that led to that execution.

- The height of the tree is the _worst case running time_ of the algorithm (i.e. the longest execution path).

<div class="note">

Since the decision tree is a binary tree, its height is at least $\lg N$ where $N$ is the number of <u>nodes</u> (which is not necessarily the same as e.g. the length of the input sequence). Therefore, the lower bound on any comparison-based algorithm modeled by this decision tree is $\Omega(\lg N)$.

</div>

But what is $N$?

For searching, $N$ is $\Omicron(n)$ where $n$ is the number of elements in the search space (size of the collection).

<details class="resource">
<summary>Why?</summary>

For lower bound analysis, we consider what is the most number of nodes we can pack in a binary tree of the minimum height. This is the case in a [perfect binary tree](notes/../../17-traversal/step16.md). [Recall](notes/../../23-heapsort/step06.md): in such a binary tree with $m$ nodes, there are $\left \lceil m/2 \right \rceil$ leaves and $\left \lfloor m/2 \right \rfloor$ non-leaf nodes (internal nodes and a root).

In the decision tree corresponding to the comparison-based searching algorithm, the number of leaves is greater or equal to the number of possible answers which is greater or equal to $n$, the number of elements.
> To check this claim, see the previous exercise, the number of possible outcomes is $4$, one per $a_i$ plus `null`.

So, if there are at least $n$ leaves, there are at least $2n$ nodes. The height of the tree, therefore, is at least $\lg (2n)$. 

</details>

Therefore, the lower bound on any comparison-based searching algorithm is $\Omega(\lg n)$ where $n$ is the size of the search space. <u>In other words, binary search is optimal!</u>



