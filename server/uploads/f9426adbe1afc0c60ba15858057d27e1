# Positional List

After reading this chapter and engaging in the embedded activities and reflections, you should be able to:

* Define what a **Doubly Linked List** is.
* Enumerate the advantages & disadvantages of a doubly linked list vs. a singly linked list.
* Trace the basic operations of a doubly linked list.
* Understand the basic operations of a doubly linked list well enough to implement them.
* Describe the role of **Position** abstraction.
* Explain how Position is different from the Node (inner) class.
* Explain and trace the core operations of **List ADT**.
* Describe the difference between similar operations (e.g., `front` vs. `removeFront`).
* Implement the core operations of List efficiently.
* Analyze alternative implementation approaches' time/space efficiency (e.g., array vs. linked structure).
* Explain the advantages of using **sentinel node-based implementation**.

> [Starter code](../../zip/chap14-starter.zip) for this chapter

<details class="solution" data-release="Mar 1, 2023 17:00:00">
<summary>Solution code</summary>

[Solution code](../../zip/chap14-solution.zip) for this chapter.

</details>